using System.Collections.Generic;
using Xamarin.Forms;

namespace FieldManager
{
    public partial class App : Application
    {
        public static List<Field> Fields { get; set; }
        public static List<HistoryRecord> HistoryRecords { get; set; } = new List<HistoryRecord>();

        public App()
        {
            InitializeComponent();

            // Установим стартовой страницей NavigationPage
            MainPage = new NavigationPage(new MainPage());
        }
    }
}
using System;
using System.Data;
using System.Data.SqlClient;

namespace RemoteDatabaseManager
{
    public class DatabaseHelper
    {
        // Строка подключения к удалённой базе данных
        private readonly string _connectionString = "Data Source=your_remote_ip_or_dns;Initial Catalog=FieldManagerDB;User ID=your_username;Password=your_password;Integrated Security=False;";

        // Метод для добавления поля
        public void AddField(string name, int size, bool isSown)
        {
            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                string query = "INSERT INTO Fields (Name, Size, IsSown) VALUES (@Name, @Size, @IsSown)";
                SqlCommand cmd = new SqlCommand(query, con);

                cmd.Parameters.AddWithValue("@Name", name);
                cmd.Parameters.AddWithValue("@Size", size);
                cmd.Parameters.AddWithValue("@IsSown", isSown);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        // Метод для получения всех полей
        public DataTable GetAllFields()
        {
            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                string query = "SELECT * FROM Fields";
                SqlDataAdapter adapter = new SqlDataAdapter(query, con);

                DataTable fieldsTable = new DataTable();
                adapter.Fill(fieldsTable);

                return fieldsTable;
            }
        }

        // Метод для добавления семян
        public void AddSeed(string name, float quantity, float consumptionRate, string allowedMonths)
        {
            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                string query = "INSERT INTO Seeds (Name, Quantity, ConsumptionRate, AllowedMonths) VALUES (@Name, @Quantity, @ConsumptionRate, @AllowedMonths)";
                SqlCommand cmd = new SqlCommand(query, con);

                cmd.Parameters.AddWithValue("@Name", name);
                cmd.Parameters.AddWithValue("@Quantity", quantity);
                cmd.Parameters.AddWithValue("@ConsumptionRate", consumptionRate);
                cmd.Parameters.AddWithValue("@AllowedMonths", allowedMonths);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        // Метод для получения всех семян
        public DataTable GetAllSeeds()
        {
            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                string query = "SELECT * FROM Seeds";
                SqlDataAdapter adapter = new SqlDataAdapter(query, con);

                DataTable seedsTable = new DataTable();
                adapter.Fill(seedsTable);

                return seedsTable;
            }
        }

        // Метод для добавления записи в историю
        public void AddHistoryRecord(string action, DateTime date)
        {
            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                string query = "INSERT INTO HistoryRecords (Action, Date) VALUES (@Action, @Date)";
                SqlCommand cmd = new SqlCommand(query, con);

                cmd.Parameters.AddWithValue("@Action", action);
                cmd.Parameters.AddWithValue("@Date", date);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        // Метод для получения истории действий
        public DataTable GetHistory()
        {
            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                string query = "SELECT * FROM HistoryRecords ORDER BY Date DESC";
                SqlDataAdapter adapter = new SqlDataAdapter(query, con);

                DataTable historyTable = new DataTable();
                adapter.Fill(historyTable);

                return historyTable;
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            DatabaseHelper dbHelper = new DatabaseHelper();

            // Добавление данных
            dbHelper.AddField("Field 1", 100, true);
            dbHelper.AddSeed("Wheat", 500.5f, 2.5f, "March, April, May");
            dbHelper.AddHistoryRecord("Added a new field", DateTime.Now);

            // Получение данных
            DataTable fields = dbHelper.GetAllFields();
            DataTable seeds = dbHelper.GetAllSeeds();
            DataTable history = dbHelper.GetHistory();

            // Вывод данных
            Console.WriteLine("Fields:");
            foreach (DataRow row in fields.Rows)
            {
                Console.WriteLine($"Id: {row["Id"]}, Name: {row["Name"]}, Size: {row["Size"]}, IsSown: {row["IsSown"]}");
            }

            Console.WriteLine("\nSeeds:");
            foreach (DataRow row in seeds.Rows)
            {
                Console.WriteLine($"Id: {row["Id"]}, Name: {row["Name"]}, Quantity: {row["Quantity"]}, ConsumptionRate: {row["ConsumptionRate"]}, AllowedMonths: {row["AllowedMonths"]}");
            }

            Console.WriteLine("\nHistory:");
            foreach (DataRow row in history.Rows)
            {
                Console.WriteLine($"Id: {row["Id"]}, Action: {row["Action"]}, Date: {row["Date"]}");
            }
        }
    }
}
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="FieldManager.EditFieldPage">
    <StackLayout Padding="20">
        <Label Text="Редактировать характеристики поля" FontSize="Large" HorizontalOptions="Center" />

        <Entry x:Name="NameEntry" Placeholder="Название поля" />
        <Entry x:Name="SizeEntry" Placeholder="Размер поля (км²)" Keyboard="Numeric" />

        <Button Text="Сохранить" Clicked="OnSaveClicked" />
        <Button Text="Отмена" Clicked="OnCancelClicked" />
    </StackLayout>
</ContentPage>
using System;
using Xamarin.Forms;

namespace FieldManager
{
    public partial class EditFieldPage : ContentPage
    {
        private Field _field;

        public EditFieldPage(Field field)
        {
            InitializeComponent();
            _field = field;

            // Заполняем поля данными
            NameEntry.Text = _field.Name;
            SizeEntry.Text = _field.Size.ToString();
        }

        private async void OnSaveClicked(object sender, EventArgs e)
        {
            // Обновляем характеристики поля
            _field.Name = NameEntry.Text;
            if (int.TryParse(SizeEntry.Text, out int newSize))
            {
                _field.Size = newSize;
            }
            else
            {
                await DisplayAlert("Ошибка", "Введите корректный размер.", "ОК");
                return;
            }

            // Закрываем модальное окно
            await Navigation.PopModalAsync();
        }

        private async void OnCancelClicked(object sender, EventArgs e)
        {
            // Закрываем модальное окно без изменений
            await Navigation.PopModalAsync();
        }
    }
}
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="FieldManager.EditSeedPage">
    <StackLayout Padding="20">
        <Label Text="Редактирование семян" FontSize="Large" HorizontalOptions="Center" />
        <Entry x:Name="NameEntry" Placeholder="Название семян" />
        <Entry x:Name="QuantityEntry" Placeholder="Количество (кг)" Keyboard="Numeric" />
        <Entry x:Name="ConsumptionRateEntry" Placeholder="Расход (кг/км²)" Keyboard="Numeric" />
        <Label Text="Доступные месяцы для посева:" />
        <Editor x:Name="AllowedMonthsEditor" Placeholder="Введите месяцы через запятую (например, Март, Апрель)" />

        <Button Text="Сохранить" Clicked="OnSaveClicked" />
        <Button Text="Отмена" Clicked="OnCancelClicked" />
    </StackLayout>
</ContentPage>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Xamarin.Forms;

namespace FieldManager
{
    public partial class EditSeedPage : ContentPage
    {
        private Seed _seed;

        public EditSeedPage(Seed seed = null)
        {
            InitializeComponent();
            _seed = seed;

            // Если редактируем существующее семя, заполняем поля
            if (_seed != null)
            {
                NameEntry.Text = _seed.Name;
                QuantityEntry.Text = _seed.Quantity.ToString();
                ConsumptionRateEntry.Text = _seed.ConsumptionRate.ToString();
                AllowedMonthsEditor.Text = string.Join(", ", _seed.AllowedMonths);
            }
        }

        private async void OnSaveClicked(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(NameEntry.Text) || !double.TryParse(QuantityEntry.Text, out double quantity))
            {
                await DisplayAlert("Ошибка", "Введите корректные данные.", "ОК");
                return;
            }

            if (_seed == null) // Новое семя
            {
                var newSeed = new Seed
                {
                    Id = Warehouse.Seeds.Count + 1,
                    Name = NameEntry.Text,
                    Quantity = quantity,
                    AllowedMonths = new List<string> { "Март", "Апрель", "Май" }, // Пример месяца
                    ConsumptionRate = double.Parse(ConsumptionRateEntry.Text)
                };

                Warehouse.Seeds.Add(newSeed);

                // Добавляем запись в историю
                App.HistoryRecords.Add(new HistoryRecord
                {
                    Action = $"Добавили новое семя '{newSeed.Name}' ({newSeed.Quantity:F2} кг)",
                    Date = DateTime.Now
                });

                await DisplayAlert("Успех", "Новое семя добавлено.", "ОК");
            }
            else // Редактирование существующего семени
            {
                _seed.Name = NameEntry.Text;
                _seed.Quantity = quantity;

                // Добавляем запись в историю
                App.HistoryRecords.Add(new HistoryRecord
                {
                    Action = $"Отредактировали семя '{_seed.Name}' (новое количество: {_seed.Quantity:F2} кг)",
                    Date = DateTime.Now
                });

                await DisplayAlert("Успех", "Семя обновлено.", "ОК");
            }

            await Navigation.PopAsync();
        }


        private async void OnCancelClicked(object sender, EventArgs e)
        {
            await Navigation.PopAsync();
        }
    }
}
using System.ComponentModel;

public class Field : INotifyPropertyChanged
{
    private bool _isSown;

    public int Id { get; set; }
    public string Name { get; set; }
    public int Size { get; set; }

    public bool IsSown
    {
        get => _isSown;
        set
        {
            if (_isSown != value)
            {
                _isSown = value;
                OnPropertyChanged(nameof(IsSown));
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="FieldManager.FieldsPage">
    <StackLayout>
        <Label Text="Выберите месяц:" FontSize="Large" HorizontalOptions="Center" />
        <Picker x:Name="MonthPicker" Title="Месяц" SelectedIndexChanged="OnMonthSelected">
            <Picker.Items>
                <x:String>Сентябрь</x:String>
                <x:String>Октябрь</x:String>
                <x:String>Ноябрь</x:String>
                <x:String>Декабрь</x:String>
                <x:String>Январь</x:String>
                <x:String>Февраль</x:String>
                <x:String>Март</x:String>
                <x:String>Апрель</x:String>
                <x:String>Май</x:String>
                <x:String>Июнь</x:String>
                <x:String>Июль</x:String>
                <x:String>Август</x:String>
            </Picker.Items>
        </Picker>

        <CollectionView x:Name="FieldsCollectionView"
                SelectionMode="Single"
                SelectionChanged="OnFieldSelected">
            <CollectionView.ItemTemplate>
                <DataTemplate>
                    <Frame Padding="10" Margin="5">
                        <StackLayout>
                            <Label Text="{Binding Name}" FontSize="Medium" TextColor="White" />

                        </StackLayout>
                        <Frame.Triggers>
                            <DataTrigger TargetType="Frame" Binding="{Binding IsSown}" Value="True">
                                <Setter Property="BackgroundColor" Value="LightGreen" />
                            </DataTrigger>
                            <DataTrigger TargetType="Frame" Binding="{Binding IsSown}" Value="False">
                                <Setter Property="BackgroundColor" Value="SaddleBrown" />
                            </DataTrigger>
                        </Frame.Triggers>
                    </Frame>
                </DataTemplate>
            </CollectionView.ItemTemplate>
        </CollectionView>
    </StackLayout>
</ContentPage>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Input;
using Xamarin.Forms;

namespace FieldManager
{
    public partial class FieldsPage : ContentPage
    {
        private List<Field> _fields; // Список полей
        private string _selectedMonth; // Выбранный месяц
        public ICommand ClearFieldCommand { get; }
        public FieldsPage()
        {
            InitializeComponent();


            // Используем статический список для сохранения состояния
            if (App.Fields == null)
            {
                App.Fields = new List<Field>
            {
                new Field { Id = 1, Name = "Поле 1", Size = 30 },
                new Field { Id = 2, Name = "Поле 2", Size = 40 },
                new Field { Id = 3, Name = "Поле 3", Size = 50 },
                new Field { Id = 4, Name = "Поле 4", Size = 60 },
                new Field { Id = 5, Name = "Поле 5", Size = 70 },
                new Field { Id = 6, Name = "Поле 6", Size = 80 },
                new Field { Id = 7, Name = "Поле 7", Size = 90 }
            };
            }

            FieldsCollectionView.ItemsSource = App.Fields;
        }


        // Обработчик изменения выбранного месяца
        private void OnMonthSelected(object sender, EventArgs e)
        {
            _selectedMonth = MonthPicker.SelectedItem as string;

            if (string.IsNullOrEmpty(_selectedMonth))
            {
                DisplayAlert("Ошибка", "Выберите месяц.", "ОК");
                return;
            }


        }

        // Обработчик выбора поля
        private async void OnFieldSelected(object sender, SelectionChangedEventArgs e)
        {
            var selectedField = e.CurrentSelection.FirstOrDefault() as Field;

            if (selectedField == null)
            {
                return;
            }

            if (string.IsNullOrEmpty(_selectedMonth))
            {
                await DisplayAlert("Ошибка", "Сначала выберите месяц.", "ОК");
                FieldsCollectionView.SelectedItem = null;
                return;
            }



            // Переход на страницу посева
            await Navigation.PushAsync(new SowingPage(selectedField, _selectedMonth));

            // Обновляем отображение
            FieldsCollectionView.SelectedItem = null;
        }


        protected override void OnAppearing()
        {
            base.OnAppearing();

            // Обновляем источник данных, чтобы отобразить актуальный статус полей
            FieldsCollectionView.ItemsSource = null;
            FieldsCollectionView.ItemsSource = App.Fields;
        }

        public void UpdateFields()
        {
            FieldsCollectionView.ItemsSource = null;
            FieldsCollectionView.ItemsSource = App.Fields;
        }
    }
}
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="FieldManager.HistoryPage">
    <StackLayout>
        <Label Text="История действий" FontSize="Large" HorizontalOptions="Center" />
        <ListView x:Name="HistoryListView">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <TextCell Text="{Binding Action}" Detail="{Binding Date}" />
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>
    </StackLayout>
</ContentPage>
using System.Linq;
using Xamarin.Forms;

namespace FieldManager
{
    public partial class HistoryPage : ContentPage
    {
        public HistoryPage()
        {
            InitializeComponent();

            // Привязываем историю
            HistoryListView.ItemsSource = App.HistoryRecords
                .OrderByDescending(record => record.Date) // Сортировка по убыванию даты
                .Select(record => new { record.Action, Date = record.Date.ToString("dd.MM.yyyy HH:mm") });
        }
    }
}
using System;

public class HistoryRecord
{
    public string Action { get; set; } // Описание действия
    public DateTime Date { get; set; } // Дата действия
}
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="FieldManager.MainPage">
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Поля" Clicked="OnFieldsClicked" />
        <ToolbarItem Text="Склад" Clicked="OnWarehouseClicked" />
        <ToolbarItem Text="История" Clicked="OnHistoryClicked" />
    </ContentPage.ToolbarItems>
    <StackLayout>
        <Label Text="Добро пожаловать в систему управления полями!" 
               FontSize="Medium"
               VerticalOptions="CenterAndExpand"
               HorizontalOptions="CenterAndExpand" />
    </StackLayout>
</ContentPage>
using System;

using Xamarin.Forms;

namespace FieldManager
{
    public partial class MainPage : ContentPage
    {
        public MainPage()
        {
            InitializeComponent();
        }
        private async void OnFieldsClicked(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new FieldsPage());
        }

        private async void OnWarehouseClicked(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new WarehousePage());
        }

        private async void OnHistoryClicked(object sender, EventArgs e)
        {
            await Navigation.PushAsync(new HistoryPage());
        }

        private async void OnInvoicesClicked(object sender, EventArgs e)
        {
            // Реализуйте аналогично другие страницы
        }

    }
}
using System.Collections.Generic;

public class Seed
{
    public int Id { get; set; }
    public string Name { get; set; }
    public double Quantity { get; set; }
    public List<string> AllowedMonths { get; set; } // Месяцы для посева
    public double ConsumptionRate { get; set; }    // Расход семян (кг/км²)
}
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="FieldManager.SowingPage">
    <StackLayout Padding="20">
        <Label Text="Посев семян" FontSize="Large" HorizontalOptions="Center" />
        <Label x:Name="FieldInfoLabel" FontSize="Medium" />

        <!-- Указываем свойство ItemDisplayBinding -->
        <Picker x:Name="SeedPicker" Title="Выберите семена" ItemDisplayBinding="{Binding Name}" />

        <Label Text="Требуется (кг):" />
        <Label x:Name="RequiredSeedsLabel" FontSize="Medium" />
        <Label Text="На складе (кг):" />
        <Label x:Name="AvailableSeedsLabel" FontSize="Medium" />
        <Button Text="Засеять" Clicked="OnSowButtonClicked" />
        <Button Text="Очистить" Clicked="ClearClicked" />
    </StackLayout>
</ContentPage>
using System;
using System.Linq;
using Xamarin.Forms;

namespace FieldManager
{
    public partial class SowingPage : ContentPage
    {
        private Field _field; // Строго типизированное поле
        private double _requiredSeeds;

        public SowingPage(Field field, string selectedMonth)
        {
            InitializeComponent();
            _field = field;

            FieldInfoLabel.Text = $"Поле: {_field.Name}, Размер: {_field.Size} км²";

            // Фильтруем семена по выбранному месяцу
            var availableSeeds = Warehouse.Seeds
                .Where(seed => seed.AllowedMonths.Contains(selectedMonth))
                .ToList();

            if (availableSeeds.Any())
            {
                SeedPicker.ItemsSource = availableSeeds;
            }
            else
            {
                DisplayAlert("Нет доступных семян", $"В месяце {selectedMonth} нельзя засеять поле.", "ОК");
                Navigation.PopAsync();
            }

            SeedPicker.ItemDisplayBinding = new Binding("Name");
            SeedPicker.SelectedIndexChanged += OnSeedSelected;
        }



        private void OnSeedSelected(object sender, EventArgs e)
        {
            var selectedSeed = SeedPicker.SelectedItem as Seed;
            if (selectedSeed != null)
            {
                _requiredSeeds = _field.Size * selectedSeed.ConsumptionRate; // Расход семян
                RequiredSeedsLabel.Text = $"{_requiredSeeds:F2} кг"; // Округление до 2 знаков
                AvailableSeedsLabel.Text = $"{selectedSeed.Quantity:F2} кг";
            }
        }


        private async void OnSowButtonClicked(object sender, EventArgs e)
        {
            var selectedSeed = SeedPicker.SelectedItem as Seed;

            if (_field.IsSown == true)
            {
                await DisplayAlert("Ошибка", $"Поле уже посеяно", "ОК");
                return;
            }
            if (selectedSeed != null)
            {
                if (selectedSeed.Quantity >= _requiredSeeds)
                {
                    // Уменьшаем количество семян
                    selectedSeed.Quantity -= _requiredSeeds;

                    // Помечаем поле как засеянное
                    _field.IsSown = true;

                    // Добавляем запись в историю
                    App.HistoryRecords.Add(new HistoryRecord
                    {
                        Action = $"Засеяли поле '{_field.Name}' семенами '{selectedSeed.Name}' ({_requiredSeeds:F2} кг)",
                        Date = DateTime.Now
                    });

                    await DisplayAlert("Успех", $"{_field.Name} успешно засеяно семенами {selectedSeed.Name}.", "ОК");

                    // Закрываем страницу посева
                    await Navigation.PopAsync();
                }
                else
                {
                    await DisplayAlert("Ошибка", $"Недостаточно семян {selectedSeed.Name} для посева.", "ОК");
                }
            }
        }





        private async void ClearClicked(object sender, EventArgs e)
        {
            if (_field.IsSown)
            {
                // Сбрасываем статус поля
                _field.IsSown = false;

                // Добавляем запись в историю
                App.HistoryRecords.Add(new HistoryRecord
                {
                    Action = $"Очистили поле '{_field.Name}'",
                    Date = DateTime.Now
                });

                await DisplayAlert("Успех", $"{_field.Name} очищено.", "ОК");

                // Обновляем интерфейс
                FieldsPage fieldsPage = Navigation.NavigationStack.OfType<FieldsPage>().FirstOrDefault();
                if (fieldsPage != null)
                {
                    fieldsPage.UpdateFields();
                }
            }
            else
            {
                // Поле уже пустое
                await DisplayAlert("Ошибка", "Поле уже пустое.", "ОК");
            }
        }


    }
}
using System.Collections.Generic;
using FieldManager;

namespace FieldManager
{
    public static class Warehouse
    {
        public static List<Seed> Seeds { get; set; } = new List<Seed>
        {
            new Seed { Id = 1, Name = "Пшеница", Quantity = 10001, AllowedMonths = new List<string> { "Март", "Апрель", "Май" }, ConsumptionRate = 10 },
            new Seed { Id = 2, Name = "Рожь", Quantity = 8000, AllowedMonths = new List<string> { "Октябрь", "Ноябрь" }, ConsumptionRate = 8 },
            new Seed { Id = 3, Name = "Ячмень", Quantity = 14900, AllowedMonths = new List<string> { "Май", "Июнь" }, ConsumptionRate = 12 },
            // Добавьте другие культуры...
        };
    }
}
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="FieldManager.WarehousePage">
    <StackLayout>
        <Label Text="Склад семян" FontSize="Large" HorizontalOptions="Center" />
        <Button Text="Добавить семя" Clicked="OnAddSeedClicked" />
        <ListView x:Name="WarehouseListView" ItemTapped="OnSeedTapped">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <TextCell Text="{Binding Name}" Detail="{Binding Quantity}" />
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>
    </StackLayout>
</ContentPage>
using System;
using System.Linq;
using Xamarin.Forms;

namespace FieldManager
{
    public partial class WarehousePage : ContentPage
    {
        public WarehousePage()
        {
            InitializeComponent();
            WarehouseListView.ItemsSource = Warehouse.Seeds;
        }

        private async void OnAddSeedClicked(object sender, EventArgs e)
        {
            // Переход на страницу добавления нового семени
            await Navigation.PushAsync(new EditSeedPage());
        }

        private async void OnSeedTapped(object sender, ItemTappedEventArgs e)
        {
            if (e.Item is Seed selectedSeed)
            {
                // Переход на страницу редактирования выбранного семени
                await Navigation.PushAsync(new EditSeedPage(selectedSeed));
            }
        }

        protected override void OnAppearing()
        {
            base.OnAppearing();
            // Обновляем данные при возвращении на страницу
            WarehouseListView.ItemsSource = null;
            WarehouseListView.ItemsSource = Warehouse.Seeds;
        }
    }
}
